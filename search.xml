<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ROR - CRUD</title>
    <url>/2023/11/26/14-ROR-CRUD-concept/</url>
    <content><![CDATA[<h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><span id="more"></span>

<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="">MDN - </a></p>
]]></content>
      <categories>
        <category>Ruby</category>
        <category>Rails</category>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>Rails</tag>
        <tag>Ruby on Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails</title>
    <url>/2023/11/25/13-Rails/</url>
    <content><![CDATA[<h1 id="Rails"><a href="#Rails" class="headerlink" title="Rails"></a>Rails</h1><span id="more"></span>

<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="">MDN - </a></p>
]]></content>
      <categories>
        <category>Rails</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>以 Ruby 做後端的開序</title>
    <url>/2023/11/24/12-Ruby/</url>
    <content><![CDATA[<h1 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h1><p>Ruby 是一種物件導向的程式語言，是由<a href="https://zh.wikipedia.org/zh-tw/%E6%9D%BE%E6%9C%AC%E8%A1%8C%E5%BC%98">松本行弘</a>設計以及開發。</p>
<p>最主要理念是希望在寫程式碼時，減少不必要的時間，所以設計上較為人性化。</p>
<p>有興趣的話，可以到 Ruby 的<a href="https://www.ruby-lang.org/en/">官網</a>做查詢。</p>
<span id="more"></span>

<h1 id="安裝-Ruby"><a href="#安裝-Ruby" class="headerlink" title="安裝 Ruby"></a><center>安裝 Ruby</center></h1><h1 id="作業系統"><a href="#作業系統" class="headerlink" title="作業系統"></a>作業系統</h1><p>我的電腦是 Apple M2 Pro, 16 GB, macOS Ventura Version 13.5，</p>
<p>所以我這邊介紹以 Mac OS X 為範例。</p>
<p>其實在 Mac 的作業系統內，其實已經有內建 Ruby 在裡面。</p>
<p>不過在這邊，還是藉由 RVM(Ruby Version Manager)來管理 Ruby。</p>
<h1 id="安裝-RVM"><a href="#安裝-RVM" class="headerlink" title="安裝 RVM"></a>安裝 RVM</h1><ol>
<li><p>開啟終端機(Terminal)</p>
</li>
<li><p>於終端機內執行 Install RVM 的執行程式 - 請參考：<a href="https://rvm.io/">RVM 的官網</a></p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\curl -sSL https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>於終端機內執行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm list known</span><br></pre></td></tr></table></figure>

<p>藉由此列表查看可以安裝哪些版本，或是可以查看<a href="https://www.ruby-lang.org/en/downloads/releases/">releases 的版本</a></p>
<ol start="4">
<li>我裝的版本是 3.2.2，所以於終端機內執行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm install 3.2.2</span><br></pre></td></tr></table></figure>

<p>藉由此即可安裝 Ruby 3.2.2 版</p>
<h1 id="遇到的問題"><a href="#遇到的問題" class="headerlink" title="遇到的問題"></a>遇到的問題</h1><p>其實我裝 Ruby 的時候有遇到困難，然後藉由<a href="https://stackoverflow.com/questions/73976833/error-running-rvm-make-j10-while-installing-ruby-2-6-5-on-mac/76766876#76766876">stack overflow</a>，</p>
<p>發現是 M2 Pro 的預設路徑有所不同。</p>
<p>最後藉由在終端機執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm install 3.2.2 --with-openssl-dir=/opt/homebrew/Cellar/openssl@3</span><br></pre></td></tr></table></figure>

<p>使用這個方式之後，才順利完成安裝。</p>
<h1 id="檢查版本"><a href="#檢查版本" class="headerlink" title="檢查版本"></a>檢查版本</h1><p>當我們安裝好 Ruby 之後，我們可以藉由，在終端機執行：</p>
<ul>
<li>查看目前電腦內安裝過的 Ruby 版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm list</span><br></pre></td></tr></table></figure>

<ul>
<li>查看目前電腦使用的 Ruby 版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ruby -v</span><br></pre></td></tr></table></figure>

<ul>
<li>切換至其他的 Ruby 版本，藉由 rvm use x.x.x：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm use 2.4.1</span><br></pre></td></tr></table></figure>

<ul>
<li>將某個 Ruby 版本列為預設值，這樣不用每次更換，藉由 rvm x.x.x - -default</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm 2.3.3 - -default</span><br></pre></td></tr></table></figure>

<ul>
<li>將某個版本移除，藉由 rvm uninstall x.x.x</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm uninstall 2.2.1</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://zh.wikipedia.org/zh-tw/Ruby">維基百科 - Ruby</a></p>
<p><a href="https://www.ruby-lang.org/en/">官網 - Ruby</a></p>
<p><a href="https://rvm.io/">官網 - RVM</a></p>
<p><a href="https://stackoverflow.com/">官網 - stack overflow</a></p>
]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 嚴格模式</title>
    <url>/2023/11/23/11-use-stict/</url>
    <content><![CDATA[<h1 id="為何有嚴格模式？"><a href="#為何有嚴格模式？" class="headerlink" title="為何有嚴格模式？"></a>為何有嚴格模式？</h1><p>我們藉由程式碼讓 JavaScript 知道說，</p>
<p>我們應該在嚴格模式的情境下使用我們的程式碼。</p>
<p>當如果我們開啟嚴格模式，讓 JavaScript 語法嚴格、語法受限下執行。</p>
<p>藉由嚴格模式，我們可以避免一些錯誤不再被忽略。</p>
<span id="more"></span>

<h1 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h1><p>藉由 use strict 的寫法來開啟嚴格模式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">x = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>

<p>當使用嚴格模式下，我們就不能不宣告變數就指定它，這樣會有錯誤訊息。</p>
<h2 id="什麼情況就不能用"><a href="#什麼情況就不能用" class="headerlink" title="什麼情況就不能用"></a>什麼情況就不能用</h2><ol>
<li><p>不能使用沒有宣告的變數</p>
</li>
<li><p>不能重複定義變數</p>
</li>
<li><p>不能刪除不可刪除的屬性</p>
</li>
</ol>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>嚴格模式存在的目的，當使用了嚴格沒是，讓我們能夠更好控制程式碼，避免一些錯誤發生。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Strict_mode">MDN - Strict mode</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 變數提升</title>
    <url>/2023/11/22/10-hosting/</url>
    <content><![CDATA[<h1 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h1><p>對於「提升」，其實它不是一個原本特有的名詞，</p>
<p>而是用來了解在 JavaScript 當中如何運行的，</p>
<p>主要是由於 JavaScript 當中<strong>執行階段</strong>的關係，而導致這個情況。</p>
<span id="more"></span>

<h2 id="變數提升"><a href="#變數提升" class="headerlink" title="變數提升"></a>變數提升</h2><p>不過一般而言，這個模式很容易令人誤解，可能會因為變數宣告放在比較後面，</p>
<p>然後以為藉由變數提升，導致我們可能以為只是單純將變數移動至上方做使用。</p>
<p>舉個例子來說：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Arance&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br></pre></td></tr></table></figure>

<p>對於我們理解程式碼由上而下做解析，的確這樣名字會印出 Arance。</p>
<p>但如果是這樣的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Arance&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>我們可能會覺得，今天由上而下的概念，這樣名字還沒被宣告就拿來用，</p>
<p>應該會有錯吧（？）但這樣名字卻會顯示 undefined。</p>
<p>不會噴錯誤訊息？？？？？？？</p>
<p>對！在 JavaScript 裡面的運行的確只會得到 undefined。</p>
<p>這是因為 JavaScript 擁有兩階段執行。</p>
<h1 id="兩階段執行"><a href="#兩階段執行" class="headerlink" title="兩階段執行"></a>兩階段執行</h1><p>什麼是兩階段執行？</p>
<p>對於 JavaScript 執行程式，有兩個期間：</p>
<ol>
<li><p>建立期 - 在建立期時，主要會做註冊名稱（建立變數）＋初始化。</p>
</li>
<li><p>執行期 - 在執行期時，賦予值或是執行函數。</p>
</li>
</ol>
<p><font color=#FF0000>例子 1:</font></p>
<p>這樣講可能有點抽象，像上面的例子而言：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Arance&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br></pre></td></tr></table></figure>

<p>在建立期時：</p>
<p>第一條，主要將 name 建立這個變數，並對它做初始化，將 name 指定為 undefined。<br>而對於第二條，console.log(name)不會做任何事。</p>
<p>在執行期時：</p>
<p>第一條會將 name 指定為 Arance，就是所謂的賦予值。</p>
<p>第二條，console.log(name)就會執行函數，而將它印出來。</p>
<p><font color=#FF0000>例子 2:</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Arance&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>在建立期時：</p>
<p>第一條，console.log(name)不會做任何事。</p>
<p>第二條，主要將 name 建立這個變數，並對它做初始化，將 name 指定為 undefined。</p>
<p>在執行期時：</p>
<p>第一條，console.log(name)就會執行函數，而將它印出來，所以會得到 undefined。</p>
<p>第二條會將 name 指定為 Arance，就是所謂的賦予值。</p>
<p>所以才導致，這樣印出來是 undefined。</p>
<p>針對 var 而言的變數提升，而很多人認為 let 不會做變數提升，</p>
<p>但其實會，只不過我們在宣告 let 前就使用的話，會出現錯誤。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Arance&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>在建立期時：</p>
<p>第一條，console.log(name)不會做任何事。</p>
<p>第二條，主要將 name 建立這個變數，但不會對它做初始化。</p>
<p>在執行期時：</p>
<p>第一條，console.log(name)就會執行函數，但由於沒有定義，所以會直接跳出錯誤訊息。</p>
<p>主要因為沒有初始化，導致錯誤訊息，那是因為使用 let 宣告變數，</p>
<p>會存在於暫時死區(Temporal Dead Zone,簡稱 TDZ)，</p>
<p>而對於 let 以及 const 宣告變數都會存在於 TDZ 內。</p>
<h2 id="暫時死區"><a href="#暫時死區" class="headerlink" title="暫時死區"></a>暫時死區</h2><p>暫時死區的好處就是可以避免我們在對變數宣告前就做使用，會進入的一區域，</p>
<p>這樣只要在使用前沒宣告的話，在使用當下就會直接告訴我們錯誤訊息。</p>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>雖然變數提升，雖然可以讓我們在宣告之前就可以使用變數，</p>
<p>但同樣的也會有所缺點是，或許這個會使用到其他人所定義的變數，</p>
<p>那或許根本不是我們想要的變數。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting">MDN - Hosting</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中 var, let, const 之間的差異</title>
    <url>/2023/11/21/09-JS-var-let-const/</url>
    <content><![CDATA[<h1 id="宣告"><a href="#宣告" class="headerlink" title="宣告"></a>宣告</h1><p>我們會藉由 var, let, const 做宣告，這三個即是在 Javascript 內的保留字。</p>
<p>而早期只有 var 來宣告，但在 ES6 之後就加入了 let 以及 const。</p>
<h2 id="宣告的重要性"><a href="#宣告的重要性" class="headerlink" title="宣告的重要性"></a>宣告的重要性</h2><p>如果沒有宣告變數, 有可能導致無法預測的結果。</p>
<p>在 ECMAScript 5 中的嚴格模式(strict model)，</p>
<p>如果在函數中，給一個沒有經過宣告的函數，賦予值將導致錯誤。</p>
<p>那什麼是嚴格模式，未來會將有一篇特別提到嚴格模式。</p>
<span id="more"></span>

<h1 id="var"><a href="#var" class="headerlink" title="var"></a>var</h1><p>用來宣告變數同時間，賦予一個初始值（非強制性）。非強制性指的是什麼呢？</p>
<p>舉個例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br></pre></td></tr></table></figure>

<p>我們可以藉由 var a 來宣告一個 a 變數，但我們不一定要給 a 變數任何初始值。</p>
<h1 id="let"><a href="#let" class="headerlink" title="let"></a>let</h1><p>用來宣告一個變數，而這個變數只能用於目前區塊（block），只要跳脫出 block 就不行使用，</p>
<p>而初始值可以選擇是否需要設定。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br></pre></td></tr></table></figure>

<p>前面迴圈分別得到 0, 1, 2, 3, 4 ；</p>
<p>而在 Block 外的 console.log(i)，其中的 i 已經跳脫出 Block Scope，</p>
<p>所以會得到 <font color=#0000FF><strong>Uncaught ReferenceError: i is not defined</strong></font></p>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>用來宣告常數(Constants)，它與 let 宣告相似，也具有區塊範圍，</p>
<p>然而常數不能重複指定它的值，也不能重複做宣告。</p>
<p>所以對於 const 宣告時，不適合不給初始值，因為常數不能變，</p>
<p>所以宣告的同時就要給定值，要不然藉由 const 宣告出來的東西就沒意義。</p>
<h2 id="差異"><a href="#差異" class="headerlink" title="差異"></a>差異</h2><ol>
<li>對於宣告而言：</li>
</ol>
<p>var 宣告後的變數，是可以重複被宣告的；</p>
<p>但 let 跟 const 是不能重複被宣告。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> feeling = <span class="string">&quot;happy&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> feeling = <span class="string">&quot;unhappy&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>var 可以重複被宣告</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> feeling = <span class="string">&quot;happy&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> feeling = <span class="string">&quot;unhappy&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>而 let 不可以重複被宣告。</p>
<p>但 let 可以重新賦予值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> feeling = <span class="string">&quot;happy&quot;</span>;</span><br><span class="line">feeling = <span class="string">&quot;unhappy&quot;</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>對於作用的範圍而言：</li>
</ol>
<p>var 定義出來的是變數全域變數，也是 function scope，</p>
<p>主要是針對在 function 內用 var 定義出來的變數，跳脫出 Function 後，就會沒有作用；</p>
<p>對於 let 跟 const 都是 Block Scope，跳脫出 Block 後，就會沒有作用。</p>
<p><font color=#FF0000>例子 1:</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> feeling = <span class="string">&quot;happy&quot;</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">feeling</span>; <span class="comment">// &quot;happy&quot;</span></span><br></pre></td></tr></table></figure>

<p>會得到 happy。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> feeling = <span class="string">&quot;happy&quot;</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">feeling</span>; <span class="comment">// &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure>

<p>會得到 undefined。</p>
<p><font color=#FF0000>例子 2:</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br></pre></td></tr></table></figure>

<p>前面迴圈分別得到 0, 1, 2, 3, 4 ；</p>
<p>而在 Block 外的 console.log(i)會得到 4。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br></pre></td></tr></table></figure>

<p>前面迴圈分別得到 0, 1, 2, 3, 4 ；</p>
<p>而在 Block 外的 console.log(i)，其中的 i 已經跳脫出 Block Scope，</p>
<p>所以會得到 <font color=#0000FF><strong>Uncaught ReferenceError: i is not defined</strong></font></p>
<p><font color=#FF0000>例子 3:</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">num</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br></pre></td></tr></table></figure>

<p>會得到 <font color=#0000FF><strong>Uncaught ReferenceError: i is not defined</strong></font>，因為 var 定義的變數 i，</p>
<p>已經跳脫出 Function Scope。</p>
<p>而在 Block 外的 console.log(i)會得到 4。</p>
<ol start="3">
<li>對於變數提升而言：</li>
</ol>
<p>主要會藉由新的一篇詳細介紹什麼是變數提升，在這邊只會比較有什麼差異：</p>
<p>var 宣告的變數，會將初始化的值定義成 undefined，</p>
<p>所以當宣告前就使用變數，只會得到 undefined，而不會跳出錯誤訊息；</p>
<p>但 let 與 const 所宣告的變數，對於變數提升而言，不會做初始化，</p>
<p>所以這些變數會進入暫時死區(Temporal Dead Zone，簡稱 TDZ)，</p>
<p>所以當宣告前就使用變數，就會出現錯誤訊息。</p>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>let 跟 const 大多都是一樣的，所以上面的例子都是 let 跟 var 的差別；</p>
<p>然而，let 是針對變數宣告，而 const 是針對常數做宣告，</p>
<p>所以 let 可以重新賦予值，但 const 不行。</p>
<p>但對於賦予值的定義是不能改變當變數是原生值的時候，例如：字串、數字…等。</p>
<p>如果變數是物件，仍可以改變。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> feeling = &#123; <span class="attr">today</span>: <span class="string">&quot;happy&quot;</span> &#125;;</span><br><span class="line">feeling.<span class="property">today</span> = <span class="string">&quot;unhappy&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>這樣 feeling 就會變成 today: “unhappy”</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/var">MDN - var</a></p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/let">MDN - let</a></p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/const">MDN - const</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 判斷式</title>
    <url>/2023/11/19/08-JS-if...and-loop/</url>
    <content><![CDATA[<h1 id="判斷式"><a href="#判斷式" class="headerlink" title="判斷式"></a>判斷式</h1><p>用來作流程控制，當指定的條件成立時，就會執行某件事。</p>
<p>在 Javascript 中，有兩種判斷式的語法：</p>
<ul>
<li><p>if…else</p>
</li>
<li><p>switch</p>
</li>
</ul>
<h2 id="什麼是流程控制？"><a href="#什麼是流程控制？" class="headerlink" title="什麼是流程控制？"></a>什麼是流程控制？</h2><p>流程控制定義就是程式執行的流程順序，和對應不同狀況而採取不同流程。</p>
<span id="more"></span>

<h1 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h1><p>對於 if…else 而言，代表當如果符合什麼條件的情況下，</p>
<p>會做什麼事，除此之外…會做什麼事。</p>
<p>會以以下的形式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (條件)&#123;</span><br><span class="line">    符合條件要做的事</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    除此之外，要做的事</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>舉個例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> status = <span class="string">&quot;good&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (status == <span class="string">&quot;sick&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;take rest at home&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go to school&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果今天我生病了，我會留在家裡休息，如果不是，就會去學校上學。</p>
<p>我今天的狀況是好的，所以以上述的例子而言，我會去學校上課。</p>
<h1 id="三元運算子"><a href="#三元運算子" class="headerlink" title="三元運算子"></a>三元運算子</h1><p>跟 if 條件判斷式很像，寫法是藉由一個條件後帶著問號，</p>
<p>在將符合條件要做的事以及不符合條件做的事中間以冒號做分隔。</p>
<p>語法：<font color=#0000FF><strong>condition ? exprIfTrue : exprIfFalse</strong></font></p>
<p>我們可以把上面的例子用，三元運算子來表達：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> status = <span class="string">&quot;good&quot;</span>;</span><br><span class="line"></span><br><span class="line">status == <span class="string">&quot;sick&quot;</span> ? <span class="string">&quot;take rest at home&quot;</span> : <span class="string">&quot;go to school&quot;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="if…else-if…-else…"><a href="#if…else-if…-else…" class="headerlink" title="if…else if… else…"></a>if…else if… else…</h1><p>對 if…else 而言，可能將情況二分法，</p>
<p>但對 if…else if… else…而言，</p>
<p>情況就不一定只有兩種，是兩種以上。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> status = <span class="string">&quot;good&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (status == <span class="string">&quot;sick&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;take rest at home&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == <span class="string">&quot;a little uncomfortable&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;take half day&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == <span class="string">&quot;want to sleep&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;take a nap for more ten minutes&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go to school&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果今天我生病了，我會留在家裡休息；</p>
<p>如果有點不舒服，會請半天假；</p>
<p>有點想睡，只能再睡 10 分鐘；</p>
<p>如果都不是，就會去學校上學。</p>
<p>我今天的狀況是好的，所以以上述的例子而言，我會去學校上課。</p>
<h1 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h1><p>對 switch 語法而言，會以 switch…case 以及 break 做搭配：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (變數)&#123;</span><br><span class="line">    <span class="keyword">case</span> 條件<span class="number">1</span>:</span><br><span class="line">    符合條件<span class="number">1</span>要做的事;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 條件<span class="number">2</span>:</span><br><span class="line">    符合條件<span class="number">2</span>要做的事;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    ... <span class="comment">//可能不止兩個條件</span></span><br><span class="line"></span><br><span class="line">    [<span class="attr">default</span>:]</span><br><span class="line">        <span class="comment">//與其他條件都不符合，就以這個去執行</span></span><br><span class="line">    [<span class="keyword">break</span>;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之前的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> status = <span class="string">&quot;good&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (status) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;sick&quot;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;take rest at home&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;a little uncomfortable&quot;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;take half day&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;want to sleep&quot;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;take a nap for more ten minutes&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go to school&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>對於 default 而言，就是除了上述的情況以外，剩下的情況都要去上學。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/if...else">MDN - if..else</a></p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Conditional_operator">MDN - 條件運算子</a></p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/switch">MDN - switch</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基礎</title>
    <url>/2023/11/16/07-JS-Language/</url>
    <content><![CDATA[<h1 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h1><p>簡單來說，變數是沒有固定的值，可以改變，像我們小時候做代數一樣，</p>
<p>x+1&#x3D;9，此時的 x 即為 8；當今天 x-4&#x3D;2，此時的 x 即為 6。</p>
<p>除了是單一個值之外，也可以是一個陣列。</p>
<p>在 JavaScript 語法當中，我們要宣告一個變數，會使用：</p>
<ul>
<li><p>var</p>
</li>
<li><p>let</p>
</li>
</ul>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">221</span>;</span><br><span class="line">a = <span class="number">789</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure>

<p>宣告一個變數 a，而它的值為 221，但我們可以藉由指定再將 a 變數指定為 789 的值。</p>
<p>而對於變數而言，變數 b 宣告了但卻沒有給定初始值，這樣 b 會印出 undefined。</p>
<p>let 也是相同方法，宣告變數，究竟 let 跟 var 有什麼差別呢？</p>
<p>我之後會藉由一篇專門討論他們之間的差異性。</p>
<h1 id="常數"><a href="#常數" class="headerlink" title="常數"></a>常數</h1><p>如果有一個數為固定的值，將永恆不變，我們就會藉由常數去定義它。</p>
<p>我們會使用 const 定義一個常數，然而由於常數定義之後將不能改變，</p>
<p>所以我們宣告常數時，就必定要給它一個初始值，</p>
<p>因為我們不給定初始值的情況下，之後也不能改變這常數的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">221</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure>

<h1 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h1><p>對於矩陣而言，是很多的元素組合再一起，可以想像成工具箱裡面有很多工具，</p>
<p>今天想放的工具可以不斷的增加，或拿出來；矩陣也是，它的長度（容量）可以隨時改變。</p>
<p>我們會藉由中括號的形式來顯示 &#x3D;&gt; [ ]</p>
<p>我們可以藉由將一個變數定義成矩陣的形式。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> toolBox = [<span class="string">&quot;screws&quot;</span>, <span class="string">&quot;scissors&quot;</span>, <span class="string">&quot;tape&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toolBox.<span class="property">length</span>);</span><br><span class="line">toolBox[<span class="number">0</span>] = <span class="string">&quot;screwdriver&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toolBox);</span><br></pre></td></tr></table></figure>

<p>工具箱這個變數，是一個陣列的型態，陣列元素裡有螺絲、剪刀、膠帶，而陣列的長度為 3。</p>
<p>將工具箱第 0 個元素（也就是第一個的螺絲）換成螺絲起子，這樣工具箱裡的東西就會變成螺絲起子、剪刀、膠帶。</p>
<h1 id="物件"><a href="#物件" class="headerlink" title="物件"></a>物件</h1><p>對於物件主要是可以存放很多 key 跟 value 的對配，而主要會以{ }的形式，。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Arance&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">isAdult</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>對於 person 內的 name, age, isAdult 就是 key；而 Arance, 30, true 就是 value。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://zh.wikipedia.org/zh-tw/%E8%AE%8A%E6%95%B8">維基百科 - 變數</a></p>
<p><a href="https://zh.wikipedia.org/zh-tw/%E5%B8%B8%E6%95%B0">維基百科 - 常數</a></p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array">MDN - 矩陣</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>相等比較</title>
    <url>/2023/11/09/06-equal/</url>
    <content><![CDATA[<h1 id="JavaScript-的相等比較"><a href="#JavaScript-的相等比較" class="headerlink" title="JavaScript 的相等比較"></a>JavaScript 的相等比較</h1><p>相等比較為兩個值做比較判斷它們是否相等，然而在 JavaScript 中，</p>
<p>有三種方法可以做<strong>相等比較</strong>:</p>
<ul>
<li><p>一般相等</p>
</li>
<li><p>嚴格相等</p>
</li>
<li><p>Object.is 函數</p>
</li>
</ul>
<span id="more"></span>

<h2 id="一般相等"><a href="#一般相等" class="headerlink" title="一般相等"></a>一般相等</h2><p>所謂的一般相等，是藉由兩個等號做表示(&#x3D;&#x3D;)，一般相等會藉由將兩個值的型別作轉換，</p>
<p>將兩個值的型別一致化後，再做相等的比較，舉個例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">9</span> == <span class="string">&quot;9&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>結果會得到 true，因為數字 9 以及文字 9，嚴格來說本質上應該是不能相等，</p>
<p>但對於使用一般相等而言，會將兩個 9 的型別轉換成相同的型態再做比較。</p>
<p>對於布林值而言，做一般相等比較時，轉換成同一個型別，</p>
<p>會將 true 轉換為 1，而 false 轉換為 0。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> == <span class="literal">false</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>此時，型別轉換，會將 false 會轉換成 0，所以比較 0 是否為 0，即會得到 true.</p>
<p>對於 undefined 與 null 做比較，我們使用一般相等，會得到 true 的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="literal">null</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="不同型別的一般相等："><a href="#不同型別的一般相等：" class="headerlink" title="不同型別的一般相等："></a>不同型別的一般相等：</h3><p>A &#x3D;&#x3D; B</p>
<table>
<thead>
<tr>
<th></th>
<th>B 為 undefined</th>
</tr>
</thead>
<tbody><tr>
<td><strong>A 為 undefined</strong></td>
<td>undefined &#x3D;&#x3D; undefined; &#x2F;&#x2F;true</td>
</tr>
<tr>
<td><strong>A 為 null</strong></td>
<td>null &#x3D;&#x3D; undefined; &#x2F;&#x2F;true</td>
</tr>
<tr>
<td><strong>A 為 Number</strong></td>
<td>3 &#x3D;&#x3D; undefined; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 String</strong></td>
<td>“3” &#x3D;&#x3D; undefined; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 Boolean</strong></td>
<td>true &#x3D;&#x3D; undefined; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 object</strong></td>
<td>{name:”Arance”, age:30} &#x3D;&#x3D; undefined; &#x2F;&#x2F;false</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th>B 為 null</th>
</tr>
</thead>
<tbody><tr>
<td><strong>A 為 undefined</strong></td>
<td>undefined &#x3D;&#x3D; null; &#x2F;&#x2F;true</td>
</tr>
<tr>
<td><strong>A 為 null</strong></td>
<td>null &#x3D;&#x3D; null; &#x2F;&#x2F;true</td>
</tr>
<tr>
<td><strong>A 為 Number</strong></td>
<td>3 &#x3D;&#x3D; null; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 String</strong></td>
<td>“3” &#x3D;&#x3D; null; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 Boolean</strong></td>
<td>true &#x3D;&#x3D; null; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 object</strong></td>
<td>{name:”Arance”, age:30} &#x3D;&#x3D; null; &#x2F;&#x2F;false</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th>B 為 Number</th>
</tr>
</thead>
<tbody><tr>
<td><strong>A 為 undefined</strong></td>
<td>undefined &#x3D;&#x3D; 3; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 null</strong></td>
<td>null &#x3D;&#x3D; 3; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 Number</strong></td>
<td>3 &#x3D;&#x3D; 3; &#x2F;&#x2F;true</td>
</tr>
<tr>
<td><strong>A 為 String</strong></td>
<td>“3” &#x3D;&#x3D; 3; &#x2F;&#x2F;true</td>
</tr>
<tr>
<td><strong>A 為 Boolean</strong></td>
<td>true &#x3D;&#x3D; 3; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 object</strong></td>
<td>{name:”Arance”, age:30} &#x3D;&#x3D; 3; &#x2F;&#x2F;false</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th>B 為 String</th>
</tr>
</thead>
<tbody><tr>
<td><strong>A 為 undefined</strong></td>
<td>undefined &#x3D;&#x3D; “3”; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 null</strong></td>
<td>null &#x3D;&#x3D; “3”; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 Number</strong></td>
<td>3 &#x3D;&#x3D; “3”; &#x2F;&#x2F;true</td>
</tr>
<tr>
<td><strong>A 為 String</strong></td>
<td>“3” &#x3D;&#x3D; “3”; &#x2F;&#x2F;true</td>
</tr>
<tr>
<td><strong>A 為 Boolean</strong></td>
<td>true &#x3D;&#x3D; “3”; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 object</strong></td>
<td>{name:”Arance”, age:30} &#x3D;&#x3D; “3”; &#x2F;&#x2F;false</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th>B 為 Boolean</th>
</tr>
</thead>
<tbody><tr>
<td><strong>A 為 undefined</strong></td>
<td>undefined &#x3D;&#x3D; true; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 null</strong></td>
<td>null &#x3D;&#x3D; true; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 Number</strong></td>
<td>3 &#x3D;&#x3D; true; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 String</strong></td>
<td>“3” &#x3D;&#x3D; true; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 Boolean</strong></td>
<td>true &#x3D;&#x3D; true; &#x2F;&#x2F;true</td>
</tr>
<tr>
<td><strong>A 為 object</strong></td>
<td>{name:”Arance”, age:30} &#x3D;&#x3D; true; &#x2F;&#x2F;false</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th>B 為 object</th>
</tr>
</thead>
<tbody><tr>
<td><strong>A 為 undefined</strong></td>
<td>undefined &#x3D;&#x3D; {name:”Arance”, age:30}; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 null</strong></td>
<td>null &#x3D;&#x3D; {name:”Arance”, age:30}; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 Number</strong></td>
<td>3 &#x3D;&#x3D; {name:”Arance”, age:30}; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 String</strong></td>
<td>“3” &#x3D;&#x3D; {name:”Arance”, age:30}; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 Boolean</strong></td>
<td>true &#x3D;&#x3D; {name:”Arance”, age:30}; &#x2F;&#x2F;false</td>
</tr>
<tr>
<td><strong>A 為 object</strong></td>
<td>{name:”Arance”, age:30} &#x3D;&#x3D; {name:”Arance”, age:30}; &#x2F;&#x2F;true</td>
</tr>
</tbody></table>
<h2 id="嚴格相等"><a href="#嚴格相等" class="headerlink" title="嚴格相等"></a>嚴格相等</h2><p>嚴格相等是藉由三個等號做表示(&#x3D;&#x3D;&#x3D;)，使用嚴格相等比較時，</p>
<p>並不會將不同的型別轉換成相同的型別，所以兩個相同值但不同型別，會視為不同。</p>
<p>有兩個特別的例子在嚴格相等中：</p>
<ol>
<li>+0 與 -0 比較：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+<span class="number">0</span> === -<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>正零與負零做比較，會得到 true。</p>
<ol start="2">
<li>NaN 與 NaN 比較：</li>
</ol>
<p>而之前所提過 NaN 和 NaN 做比較會得到 false。</p>
<h2 id="Object-is-函數"><a href="#Object-is-函數" class="headerlink" title="Object.is 函數"></a>Object.is 函數</h2><p>對於 Object.is 函數會與嚴格相等一樣，但對於 NaN、+0、-0 會獨立處理。</p>
<p>對於 Object.is(+0,-0)會得到 false。</p>
<p>對於 Object.is(NaN,NaN)會得到 true。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness">MDN - 相等比較</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>falsy value</title>
    <url>/2023/11/05/05-falsy-value/</url>
    <content><![CDATA[<h1 id="什麼是-falsy-value？"><a href="#什麼是-falsy-value？" class="headerlink" title="什麼是 falsy value？"></a>什麼是 falsy value？</h1><p>當我們藉由邏輯判斷式(if…)時，會希望我們藉由 if 來判斷的東西回傳布林值(true or false)，</p>
<p>這樣方便我們判斷該往哪一步前進。</p>
<p>至於 falsy value 而言，就是這個值丟進去 if 判斷式內，</p>
<p>都會被列為 false，要前往得到 false 後所執行的區塊。</p>
<h2 id="false"><a href="#false" class="headerlink" title="false"></a>false</h2><p>像 false 就是很標準的被列為是 false 的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="comment">//當條件成立才會做的區塊，但由於falsy value在if判斷式內，這將不會執行這區塊。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>除了 false 以外，還有：</p>
<ul>
<li>undefined</li>
<li>null</li>
<li>0</li>
<li>-0</li>
<li>0n</li>
<li>‘’</li>
<li>“”</li>
<li>NaN</li>
</ul>
<p>對於 0n 而言，他的型態為 BigInt，它也是會代表 falsy value 之一，比如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">0n</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這個情況下，也等同於 0n 為 false。</p>
<h3 id="何謂-NaN？"><a href="#何謂-NaN？" class="headerlink" title="何謂 NaN？"></a>何謂 NaN？</h3><p>NaN 表示為 not a number，主要表示不為一個數，舉個例子來說：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> / a);</span><br></pre></td></tr></table></figure>

<p>a 這個變數是文字時，當 1&#x2F;a 就會得到 NaN，因為數字除以文字根本不會得到一個數。</p>
<p>又或者</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&quot;xyz&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>當我們藉由 Number 包住文字型態的 123 時，JavaScript 會幫我們做轉型，</p>
<p>轉換成數字型態的 123，但當 Number 包住 xyz 時，</p>
<p>xyz 儘管轉型也不會是數字型態，所以此時我們就會得到 NaN。</p>
<p>對 NaN 而言，它也是 falsy value 代表之一。</p>
<h3 id="究竟我們今天要怎麼判斷一個值是否為-NaN-呢？"><a href="#究竟我們今天要怎麼判斷一個值是否為-NaN-呢？" class="headerlink" title="究竟我們今天要怎麼判斷一個值是否為 NaN 呢？"></a>究竟我們今天要怎麼判斷一個值是否為 NaN 呢？</h3><p>我們可以藉由內建 isNaN 的函數來判斷：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">isNaN</span>(a);</span><br><span class="line"><span class="built_in">isNaN</span>(<span class="title class_">NaN</span>);</span><br></pre></td></tr></table></figure>

<p>對於 a 而言，我們使用 isNaN 的函數來詢問他，會得到 false，</p>
<p>然而對於 NaN 而言，一樣的方式，我們會得到 true。</p>
<h3 id="NaN-不為任何人"><a href="#NaN-不為任何人" class="headerlink" title="NaN 不為任何人(?)"></a>NaN 不為任何人(?)</h3><p>除了用內建的函數來判斷之外，我們也可以藉由他的特性：</p>
<p>NaN 不為任何人，如果我們今天用 NaN &#x3D;&#x3D;&#x3D; NaN 來詢問，</p>
<p>得到的答案會是 false。</p>
<p>所以儘管，我們定義一個 a 變數為 NaN，我們問他是不是 NaN，</p>
<p>它也只會回答 false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title class_">NaN</span>;</span><br><span class="line">a === <span class="title class_">NaN</span>;</span><br></pre></td></tr></table></figure>

<p>所以其實我們不能用這樣的方法判斷是不是 NaN。</p>
<p>但我們卻可以用，本身值判斷是不是不等於自己，</p>
<p>因為如果是 NaN 的情況下，判斷 NaN 是否為自己本身，不會得到 true。</p>
<p>所以我們可以藉由詢問，自己是否不等於自己本身來判斷：</p>
<p>如果得到的答案是 true 時，這個值就是 NaN(因為特性的關係，NaN 不會等於自己)，</p>
<p>而當我們答案得到 false 時，這個值就不是 NaN(表示他有特定的值)。</p>
<hr>
<p>舉個例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a !== a) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;it&#x27;s NaN&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;it&#x27;s not NaN&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在判斷式內的確會得到 false，這樣 a 就不是 NaN，的確 a 的值為 1，不是 NaN。</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">if</span> (a !== a) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;it&#x27;s NaN&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;it&#x27;s not NaN&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在判斷式內的確會得到 true，這樣 a 就 NaN，的確 a 的值為 NaN。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">MDN - Falsy</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>null undefined undeclared 三者差異性</title>
    <url>/2023/11/04/04-difference-of-n-u-u/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前提起過，其實對於 null 以及 undefined 是很容易搞混的，</p>
<p>而 undefined 以及 undeclared 也常常被拿來做比較。</p>
<p>這篇會藉由描述彼此的定義來做比較。</p>
<h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>對於 null 而言，當一個變數指定為 null 時，他其實不是沒有定義，</p>
<p>純粹定義它是一個空值。就概念而言，我們可以當作是『沒有』東西。</p>
<span id="more"></span>

<p>舉個例子來說：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> phone = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>對於電話號碼這個變數而言，現在電話號碼裡面是空的值。</p>
<h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><p>對於 undefined 而言，我們則是定義了一個變數，但我們卻沒有指定它為任何一個值；</p>
<p>也是就是沒有對變數初始化，我們則稱為未定義。</p>
<p>舉個例子來說：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> phone;</span><br></pre></td></tr></table></figure>

<p>我們則是定義了電話號碼這個變數，但卻沒賦予任何值給這個變數。</p>
<h2 id="undeclared"><a href="#undeclared" class="headerlink" title="undeclared"></a>undeclared</h2><p>對於 undeclared 則是我們從未宣告過，我們未曾定義一個變數，</p>
<p>連變數都還沒定義，就呼叫他出來，勢必會得到 undeclared 的錯誤訊息。</p>
<p>舉個例子來說：</p>
<p>我們想印出 email 這個變數。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(email);</span><br></pre></td></tr></table></figure>

<p>我們會得到 <strong>Uncaught ReferenceError: email is not defined</strong></p>
<p>這就是告訴我們，這個變數我們不曾宣告過，不曾宣告過的變數，我們就沒辦法使用。</p>
<p>就好比說我還沒有小孩，親戚來時，就對我說，你的兒子呢？</p>
<p>不曾擁有的都東西，就沒辦法出現。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Null">MDN - Null</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Undefined">MDN - Undefined</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var">MDN - ReferenceError - undeclared variable</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的資料型別</title>
    <url>/2023/11/01/03-js-data-type/</url>
    <content><![CDATA[<h1 id="資料型別"><a href="#資料型別" class="headerlink" title="資料型別"></a>資料型別</h1><p>大多數的程式語言都有自身的資料型別，而在 JavaScript 中又分為<strong>原生值</strong>以及<strong>物件</strong>，這兩大類。</p>
<h2 id="原生值"><a href="#原生值" class="headerlink" title="原生值"></a>原生值</h2><p>原生值代表著我們不能改變這個值得本身，然而除了物件外，所有的值都是原生值。</p>
<p>像對於定義一個變數而言，我們僅能將這個變數賦予另一個值，但卻不能把這個值給改變。</p>
<p>而在 JavaScript 內總共有 7 個原生值的型態：</p>
<span id="more"></span>

<h3 id="字串"><a href="#字串" class="headerlink" title="字串"></a>字串</h3><p>藉由文字資料是用來表示字串型別，上述描述的，儘管我們賦予某個變數為另一個值，</p>
<p>這也不代表我們將這個值改變，我們只是藉由指定讓他賦予另一個值。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Arance&quot;</span>;</span><br><span class="line">name = <span class="string">&quot;Orange&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>賦予 name 變數的值為 Orange，但本身的『Arance』卻沒有變動。</p>
<p>對於字串而言，索引值起始值為 0，每一個字站一個位置，</p>
<p>然而肉眼看見的第一個位置（第一個元素）表示為第 0 位。</p>
<p>儘管我們藉由<strong>substr()</strong> 將字串取出，而使用 <strong>concat()</strong> 或 <strong>+</strong> 將字串串接起來，</p>
<p>本身的值也不會改變，這就是原生值的概念。</p>
<h3 id="數字"><a href="#數字" class="headerlink" title="數字"></a>數字</h3><p>不論是<strong>整數</strong>或是<strong>浮點數</strong>都是原生值，更準確的說 -2<sup>53</sup>-1 至 2<sup>53</sup>-1 之間的數。</p>
<p>然而在 JavaScript 中， <strong>+Infinity</strong> 、 <strong>-Infinity</strong> 、 <strong>NaN</strong>，這都是數字型別。</p>
<p>註：<strong>NaN</strong> &#x3D;&gt; Not a Number</p>
<h3 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h3><p>由於 2<sup>53</sup>-1 為 9007199254740991，或許會用到更大的數。</p>
<p>此時我們就可以藉由 BigInt，可以必免一些問題。與數字型別一樣可以使用運算子。</p>
<p>但不可以拿 BigInt 與數字型別的值交互使用。</p>
<h3 id="布林值"><a href="#布林值" class="headerlink" title="布林值"></a>布林值</h3><p>布林值只有兩個值，不是<strong>true</strong>就是<strong>false</strong>。</p>
<h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p>undefined 的型別，本身是由於某個變數沒有宣告而使用，或是宣告了但卻沒賦予值。</p>
<h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>null 與 undefined 很容易搞混，undefined 主要是變數還沒有定義，而 null 是賦予這個變數為 null 這一個值。</p>
<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>Symbol 主要會搭配物件而使用，而作為物件的 key。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">key</span>: value &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="物件"><a href="#物件" class="headerlink" title="物件"></a>物件</h2><p>除了 7 個原生值之外，剩下存在至 JavaScript 當中都是物件。</p>
<p>像是 Array 以及 Function 都是物件。</p>
<h1 id="如何判斷變數型別？"><a href="#如何判斷變數型別？" class="headerlink" title="如何判斷變數型別？"></a>如何判斷變數型別？</h1><p>究竟要怎麼判斷一個變數的資料型別哪？</p>
<p>我們藉由<strong>typeof</strong>這個方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>; <span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;aaa&quot;</span>; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> &#123; <span class="attr">nn</span>: <span class="number">123</span> &#125;; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="number">123</span>; <span class="comment">// string ；因為typeof(&#x27;123&#x27;)為number，而typeof(&#x27;number&#x27;)就是String</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span>; <span class="comment">// number</span></span><br></pre></td></tr></table></figure>

<p>這邊特別值得一提的是，對於 typeof null 回傳值竟然是 object，</p>
<p>null 這個原生值型態，很多人其實認為這一點要修改，</p>
<p>不過目前為止 ES6 對於這仍然是沒有要更動的，</p>
<p>畢竟可能現在才做改變，有些人的程式碼如果有使用到的話，</p>
<p>就會被影響到。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://zh.wikipedia.org/zh-tw/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B">維基百科 - 資料型態</a></p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Data_structures">MDN - JavaScript 的資料型別與資料結構</a></p>
<p><a href="https://262.ecma-international.org/5.1/#sec-11.4.3">ECMAScript</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>網頁前端三元素</title>
    <url>/2023/10/29/02-front-end-three/</url>
    <content><![CDATA[<h1 id="網頁"><a href="#網頁" class="headerlink" title="網頁"></a>網頁</h1><p>網頁主要是由<strong>前端</strong>以及<strong>後端</strong>，這兩個部分組織而成的。</p>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前端的部分，主要是以資料輸入、採集資料；呈現介面樣式以及視覺的部分。</p>
<h2 id="後端"><a href="#後端" class="headerlink" title="後端"></a>後端</h2><p>後端的部分，主要是以獲取的資訊，做處理；作為後台管理系統的部分。<span id="more"></span></p>
<h2 id="前端三大元素"><a href="#前端三大元素" class="headerlink" title="前端三大元素"></a>前端三大元素</h2><p>然而現行的前端三大構成元素為：HTML、CSS、JavaScript。</p>
<ul>
<li>HTML：主要是網頁內容的描述語言，將它視為建立網頁的結構。</li>
<li>CSS：主要是網頁外觀型態的描述語言，讓它美化網頁。</li>
<li>JavaScript：主要用來呈現網頁動態的效果，讓用戶與網頁達到互動的效果。</li>
</ul>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>HTML 是 HyperText Markup Language 的縮寫，其實它並不是一個程式語言，<br>而是一個標記語言，藉由主架構之下來做的一種文件標記語言。</p>
<p><strong>主要的架構如下：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>CSS 是 Cascading Style Sheets 的縮寫，跟 HTML 一樣不是一個程式語言，<br>主要藉由 CSS 將 HTML 標記語言的樣式做美化。</p>
<p><strong>例如想要藉由 CSS 將所有段落變成紅色字：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>網頁前端所支援的 JavaScript 可以藉由這個程式語言，達到用戶與網頁做互動的功能。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://zh.wikipedia.org/zh-tw/%E5%89%8D%E7%AB%AF%E5%92%8C%E5%90%8E%E7%AB%AF">維基百科 - 前端和後端</a></p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML">MDN - HTML</a></p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS">MDN - CSS</a></p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript">MDN - JavaScript</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>CSS</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/29/01-hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
