<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome</title>
  
  
  <link href="https://aranceliu.github.io/atom.xml" rel="self"/>
  
  <link href="https://aranceliu.github.io/"/>
  <updated>2023-11-19T08:35:28.636Z</updated>
  <id>https://aranceliu.github.io/</id>
  
  <author>
    <name>Arance</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript基礎</title>
    <link href="https://aranceliu.github.io/2023/11/16/07-JS-Language/"/>
    <id>https://aranceliu.github.io/2023/11/16/07-JS-Language/</id>
    <published>2023-11-15T20:01:28.000Z</published>
    <updated>2023-11-19T08:35:28.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h1><p>簡單來說，變數是沒有固定的值，可以改變，像我們小時候做代數一樣，</p><p>x+1&#x3D;9，此時的 x 即為 8；當今天 x-4&#x3D;2，此時的 x 即為 6。</p><p>除了是單一個值之外，也可以是一個陣列。</p><p>在 JavaScript 語法當中，我們要宣告一個變數，會使用：</p><ul><li><p>var</p></li><li><p>let</p></li></ul><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">221</span>;</span><br><span class="line">a = <span class="number">789</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><p>宣告一個變數 a，而它的值為 221，但我們可以藉由指定再將 a 變數指定為 789 的值。</p><p>而對於變數而言，變數 b 宣告了但卻沒有給定初始值，這樣 b 會印出 undefined。</p><p>let 也是相同方法，宣告變數，究竟 let 跟 var 有什麼差別呢？</p><p>我之後會藉由一篇專門討論他們之間的差異性。</p><h1 id="常數"><a href="#常數" class="headerlink" title="常數"></a>常數</h1><p>如果有一個數為固定的值，將永恆不變，我們就會藉由常數去定義它。</p><p>我們會使用 const 定義一個常數，然而由於常數定義之後將不能改變，</p><p>所以我們宣告常數時，就必定要給它一個初始值，</p><p>因為我們不給定初始值的情況下，之後也不能改變這常數的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">221</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><h1 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h1><p>對於矩陣而言，是很多的元素組合再一起，可以想像成工具箱裡面有很多工具，</p><p>今天想放的工具可以不斷的增加，或拿出來；矩陣也是，它的長度（容量）可以隨時改變。</p><p>我們會藉由中括號的形式來顯示 &#x3D;&gt; [ ]</p><p>我們可以藉由將一個變數定義成矩陣的形式。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> toolBox = [<span class="string">&quot;screws&quot;</span>, <span class="string">&quot;scissors&quot;</span>, <span class="string">&quot;tape&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toolBox.<span class="property">length</span>);</span><br><span class="line">toolBox[<span class="number">0</span>] = <span class="string">&quot;screwdriver&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toolBox);</span><br></pre></td></tr></table></figure><p>工具箱這個變數，是一個陣列的型態，陣列元素裡有螺絲、剪刀、膠帶，而陣列的長度為 3。</p><p>將工具箱第 0 個元素（也就是第一個的螺絲）換成螺絲起子，這樣工具箱裡的東西就會變成螺絲起子、剪刀、膠帶。</p><h1 id="物件"><a href="#物件" class="headerlink" title="物件"></a>物件</h1><p>對於物件主要是可以存放很多 key 跟 value 的對配，而主要會以{ }的形式，。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Arance&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">isAdult</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>對於 person 內的 name, age, isAdult 就是 key；而 Arance, 30, true 就是 value。</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://zh.wikipedia.org/zh-tw/%E8%AE%8A%E6%95%B8">維基百科 - 變數</a></p><p><a href="https://zh.wikipedia.org/zh-tw/%E5%B8%B8%E6%95%B0">維基百科 - 常數</a></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array">MDN - 矩陣</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;變數&quot;&gt;&lt;a href=&quot;#變數&quot; class=&quot;headerlink&quot; title=&quot;變數&quot;&gt;&lt;/a&gt;變數&lt;/h1&gt;&lt;p&gt;簡單來說，變數是沒有固定的值，可以改變，像我們小時候做代數一樣，&lt;/p&gt;
&lt;p&gt;x+1&amp;#x3D;9，此時的 x 即為 8；當今天 x-4&amp;#x3D;2，此時的 x 即為 6。&lt;/p&gt;
&lt;p&gt;除了是單一個值之外，也可以是一個陣列。&lt;/p&gt;
&lt;p&gt;在 JavaScript 語法當中，我們要宣告一個變數，會使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;var&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;let&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://aranceliu.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://aranceliu.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>相等比較</title>
    <link href="https://aranceliu.github.io/2023/11/09/06-equal/"/>
    <id>https://aranceliu.github.io/2023/11/09/06-equal/</id>
    <published>2023-11-09T11:26:03.000Z</published>
    <updated>2023-11-19T03:15:26.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-的相等比較"><a href="#JavaScript-的相等比較" class="headerlink" title="JavaScript 的相等比較"></a>JavaScript 的相等比較</h1><p>相等比較為兩個值做比較判斷它們是否相等，然而在 JavaScript 中，</p><p>有三種方法可以做<strong>相等比較</strong>:</p><ul><li><p>一般相等</p></li><li><p>嚴格相等</p></li><li><p>Object.is 函數</p></li></ul><span id="more"></span><h2 id="一般相等"><a href="#一般相等" class="headerlink" title="一般相等"></a>一般相等</h2><p>所謂的一般相等，是藉由兩個等號做表示(&#x3D;&#x3D;)，一般相等會藉由將兩個值的型別作轉換，</p><p>將兩個值的型別一致化後，再做相等的比較，舉個例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">9</span> == <span class="string">&quot;9&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>結果會得到 true，因為數字 9 以及文字 9，嚴格來說本質上應該是不能相等，</p><p>但對於使用一般相等而言，會將兩個 9 的型別轉換成相同的型態再做比較。</p><p>對於布林值而言，做一般相等比較時，轉換成同一個型別，</p><p>會將 true 轉換為 1，而 false 轉換為 0。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> == <span class="literal">false</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>此時，型別轉換，會將 false 會轉換成 0，所以比較 0 是否為 0，即會得到 true.</p><p>對於 undefined 與 null 做比較，我們使用一般相等，會得到 true 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="literal">null</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="不同型別的一般相等："><a href="#不同型別的一般相等：" class="headerlink" title="不同型別的一般相等："></a>不同型別的一般相等：</h3><p>A &#x3D;&#x3D; B</p><table><thead><tr><th></th><th>B 為 undefined</th></tr></thead><tbody><tr><td><strong>A 為 undefined</strong></td><td>undefined &#x3D;&#x3D; undefined; &#x2F;&#x2F;true</td></tr><tr><td><strong>A 為 null</strong></td><td>null &#x3D;&#x3D; undefined; &#x2F;&#x2F;true</td></tr><tr><td><strong>A 為 Number</strong></td><td>3 &#x3D;&#x3D; undefined; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 String</strong></td><td>“3” &#x3D;&#x3D; undefined; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 Boolean</strong></td><td>true &#x3D;&#x3D; undefined; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 object</strong></td><td>{name:”Arance”, age:30} &#x3D;&#x3D; undefined; &#x2F;&#x2F;false</td></tr></tbody></table><table><thead><tr><th></th><th>B 為 null</th></tr></thead><tbody><tr><td><strong>A 為 undefined</strong></td><td>undefined &#x3D;&#x3D; null; &#x2F;&#x2F;true</td></tr><tr><td><strong>A 為 null</strong></td><td>null &#x3D;&#x3D; null; &#x2F;&#x2F;true</td></tr><tr><td><strong>A 為 Number</strong></td><td>3 &#x3D;&#x3D; null; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 String</strong></td><td>“3” &#x3D;&#x3D; null; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 Boolean</strong></td><td>true &#x3D;&#x3D; null; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 object</strong></td><td>{name:”Arance”, age:30} &#x3D;&#x3D; null; &#x2F;&#x2F;false</td></tr></tbody></table><table><thead><tr><th></th><th>B 為 Number</th></tr></thead><tbody><tr><td><strong>A 為 undefined</strong></td><td>undefined &#x3D;&#x3D; 3; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 null</strong></td><td>null &#x3D;&#x3D; 3; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 Number</strong></td><td>3 &#x3D;&#x3D; 3; &#x2F;&#x2F;true</td></tr><tr><td><strong>A 為 String</strong></td><td>“3” &#x3D;&#x3D; 3; &#x2F;&#x2F;true</td></tr><tr><td><strong>A 為 Boolean</strong></td><td>true &#x3D;&#x3D; 3; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 object</strong></td><td>{name:”Arance”, age:30} &#x3D;&#x3D; 3; &#x2F;&#x2F;false</td></tr></tbody></table><table><thead><tr><th></th><th>B 為 String</th></tr></thead><tbody><tr><td><strong>A 為 undefined</strong></td><td>undefined &#x3D;&#x3D; “3”; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 null</strong></td><td>null &#x3D;&#x3D; “3”; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 Number</strong></td><td>3 &#x3D;&#x3D; “3”; &#x2F;&#x2F;true</td></tr><tr><td><strong>A 為 String</strong></td><td>“3” &#x3D;&#x3D; “3”; &#x2F;&#x2F;true</td></tr><tr><td><strong>A 為 Boolean</strong></td><td>true &#x3D;&#x3D; “3”; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 object</strong></td><td>{name:”Arance”, age:30} &#x3D;&#x3D; “3”; &#x2F;&#x2F;false</td></tr></tbody></table><table><thead><tr><th></th><th>B 為 Boolean</th></tr></thead><tbody><tr><td><strong>A 為 undefined</strong></td><td>undefined &#x3D;&#x3D; true; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 null</strong></td><td>null &#x3D;&#x3D; true; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 Number</strong></td><td>3 &#x3D;&#x3D; true; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 String</strong></td><td>“3” &#x3D;&#x3D; true; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 Boolean</strong></td><td>true &#x3D;&#x3D; true; &#x2F;&#x2F;true</td></tr><tr><td><strong>A 為 object</strong></td><td>{name:”Arance”, age:30} &#x3D;&#x3D; true; &#x2F;&#x2F;false</td></tr></tbody></table><table><thead><tr><th></th><th>B 為 object</th></tr></thead><tbody><tr><td><strong>A 為 undefined</strong></td><td>undefined &#x3D;&#x3D; {name:”Arance”, age:30}; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 null</strong></td><td>null &#x3D;&#x3D; {name:”Arance”, age:30}; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 Number</strong></td><td>3 &#x3D;&#x3D; {name:”Arance”, age:30}; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 String</strong></td><td>“3” &#x3D;&#x3D; {name:”Arance”, age:30}; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 Boolean</strong></td><td>true &#x3D;&#x3D; {name:”Arance”, age:30}; &#x2F;&#x2F;false</td></tr><tr><td><strong>A 為 object</strong></td><td>{name:”Arance”, age:30} &#x3D;&#x3D; {name:”Arance”, age:30}; &#x2F;&#x2F;true</td></tr></tbody></table><h2 id="嚴格相等"><a href="#嚴格相等" class="headerlink" title="嚴格相等"></a>嚴格相等</h2><p>嚴格相等是藉由三個等號做表示(&#x3D;&#x3D;&#x3D;)，使用嚴格相等比較時，</p><p>並不會將不同的型別轉換成相同的型別，所以兩個相同值但不同型別，會視為不同。</p><p>有兩個特別的例子在嚴格相等中：</p><ol><li>+0 與 -0 比較：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === -<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>正零與負零做比較，會得到 true。</p><ol start="2"><li>NaN 與 NaN 比較：</li></ol><p>而之前所提過 NaN 和 NaN 做比較會得到 false。</p><h2 id="Object-is-函數"><a href="#Object-is-函數" class="headerlink" title="Object.is 函數"></a>Object.is 函數</h2><p>對於 Object.is 函數會與嚴格相等一樣，但對於 NaN、+0、-0 會獨立處理。</p><p>對於 Object.is(+0,-0)會得到 false。</p><p>對於 Object.is(NaN,NaN)會得到 true。</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness">MDN - 相等比較</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JavaScript-的相等比較&quot;&gt;&lt;a href=&quot;#JavaScript-的相等比較&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 的相等比較&quot;&gt;&lt;/a&gt;JavaScript 的相等比較&lt;/h1&gt;&lt;p&gt;相等比較為兩個值做比較判斷它們是否相等，然而在 JavaScript 中，&lt;/p&gt;
&lt;p&gt;有三種方法可以做&lt;strong&gt;相等比較&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一般相等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;嚴格相等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Object.is 函數&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://aranceliu.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://aranceliu.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>falsy value</title>
    <link href="https://aranceliu.github.io/2023/11/05/05-falsy-value/"/>
    <id>https://aranceliu.github.io/2023/11/05/05-falsy-value/</id>
    <published>2023-11-05T04:09:00.000Z</published>
    <updated>2023-11-18T15:24:39.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什麼是-falsy-value？"><a href="#什麼是-falsy-value？" class="headerlink" title="什麼是 falsy value？"></a>什麼是 falsy value？</h1><p>當我們藉由邏輯判斷式(if…)時，會希望我們藉由 if 來判斷的東西回傳布林值(true or false)，</p><p>這樣方便我們判斷該往哪一步前進。</p><p>至於 falsy value 而言，就是這個值丟進去 if 判斷式內，</p><p>都會被列為 false，要前往得到 false 後所執行的區塊。</p><h2 id="false"><a href="#false" class="headerlink" title="false"></a>false</h2><p>像 false 就是很標準的被列為是 false 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="comment">//當條件成立才會做的區塊，但由於falsy value在if判斷式內，這將不會執行這區塊。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>除了 false 以外，還有：</p><ul><li>undefined</li><li>null</li><li>0</li><li>-0</li><li>0n</li><li>‘’</li><li>“”</li><li>NaN</li></ul><p>對於 0n 而言，他的型態為 BigInt，它也是會代表 falsy value 之一，比如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">0n</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個情況下，也等同於 0n 為 false。</p><h3 id="何謂-NaN？"><a href="#何謂-NaN？" class="headerlink" title="何謂 NaN？"></a>何謂 NaN？</h3><p>NaN 表示為 not a number，主要表示不為一個數，舉個例子來說：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> / a);</span><br></pre></td></tr></table></figure><p>a 這個變數是文字時，當 1&#x2F;a 就會得到 NaN，因為數字除以文字根本不會得到一個數。</p><p>又或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&quot;xyz&quot;</span>);</span><br></pre></td></tr></table></figure><p>當我們藉由 Number 包住文字型態的 123 時，JavaScript 會幫我們做轉型，</p><p>轉換成數字型態的 123，但當 Number 包住 xyz 時，</p><p>xyz 儘管轉型也不會是數字型態，所以此時我們就會得到 NaN。</p><p>對 NaN 而言，它也是 falsy value 代表之一。</p><h3 id="究竟我們今天要怎麼判斷一個值是否為-NaN-呢？"><a href="#究竟我們今天要怎麼判斷一個值是否為-NaN-呢？" class="headerlink" title="究竟我們今天要怎麼判斷一個值是否為 NaN 呢？"></a>究竟我們今天要怎麼判斷一個值是否為 NaN 呢？</h3><p>我們可以藉由內建 isNaN 的函數來判斷：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">isNaN</span>(a);</span><br><span class="line"><span class="built_in">isNaN</span>(<span class="title class_">NaN</span>);</span><br></pre></td></tr></table></figure><p>對於 a 而言，我們使用 isNaN 的函數來詢問他，會得到 false，</p><p>然而對於 NaN 而言，一樣的方式，我們會得到 true。</p><h3 id="NaN-不為任何人"><a href="#NaN-不為任何人" class="headerlink" title="NaN 不為任何人(?)"></a>NaN 不為任何人(?)</h3><p>除了用內建的函數來判斷之外，我們也可以藉由他的特性：</p><p>NaN 不為任何人，如果我們今天用 NaN &#x3D;&#x3D;&#x3D; NaN 來詢問，</p><p>得到的答案會是 false。</p><p>所以儘管，我們定義一個 a 變數為 NaN，我們問他是不是 NaN，</p><p>它也只會回答 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title class_">NaN</span>;</span><br><span class="line">a === <span class="title class_">NaN</span>;</span><br></pre></td></tr></table></figure><p>所以其實我們不能用這樣的方法判斷是不是 NaN。</p><p>但我們卻可以用，本身值判斷是不是不等於自己，</p><p>因為如果是 NaN 的情況下，判斷 NaN 是否為自己本身，不會得到 true。</p><p>所以我們可以藉由詢問，自己是否不等於自己本身來判斷：</p><p>如果得到的答案是 true 時，這個值就是 NaN(因為特性的關係，NaN 不會等於自己)，</p><p>而當我們答案得到 false 時，這個值就不是 NaN(表示他有特定的值)。</p><hr><p>舉個例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a !== a) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;it&#x27;s NaN&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;it&#x27;s not NaN&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在判斷式內的確會得到 false，這樣 a 就不是 NaN，的確 a 的值為 1，不是 NaN。</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">if</span> (a !== a) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;is NaN&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;not NaN&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在判斷式內的確會得到 true，這樣 a 就 NaN，的確 a 的值為 NaN。</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">MDN - Falsy</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;什麼是-falsy-value？&quot;&gt;&lt;a href=&quot;#什麼是-falsy-value？&quot; class=&quot;headerlink&quot; title=&quot;什麼是 falsy value？&quot;&gt;&lt;/a&gt;什麼是 falsy value？&lt;/h1&gt;&lt;p&gt;當我們藉由邏輯判斷式(if…)時，會希望我們藉由 if 來判斷的東西回傳布林值(true or false)，&lt;/p&gt;
&lt;p&gt;這樣方便我們判斷該往哪一步前進。&lt;/p&gt;
&lt;p&gt;至於 falsy value 而言，就是這個值丟進去 if 判斷式內，&lt;/p&gt;
&lt;p&gt;都會被列為 false，要前往得到 false 後所執行的區塊。&lt;/p&gt;
&lt;h2 id=&quot;false&quot;&gt;&lt;a href=&quot;#false&quot; class=&quot;headerlink&quot; title=&quot;false&quot;&gt;&lt;/a&gt;false&lt;/h2&gt;&lt;p&gt;像 false 就是很標準的被列為是 false 的值。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//當條件成立才會做的區塊，但由於falsy value在if判斷式內，這將不會執行這區塊。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://aranceliu.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://aranceliu.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>null undefined undeclared 三者差異性</title>
    <link href="https://aranceliu.github.io/2023/11/04/04-difference-of-n-u-u/"/>
    <id>https://aranceliu.github.io/2023/11/04/04-difference-of-n-u-u/</id>
    <published>2023-11-04T01:21:00.000Z</published>
    <updated>2023-11-18T07:19:14.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前提起過，其實對於 null 以及 undefined 是很容易搞混的，</p><p>而 undefined 以及 undeclared 也常常被拿來做比較。</p><p>這篇會藉由描述彼此的定義來做比較。</p><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>對於 null 而言，當一個變數指定為 null 時，他其實不是沒有定義，</p><p>純粹定義它是一個空值。就概念而言，我們可以當作是『沒有』東西。</p><span id="more"></span><p>舉個例子來說：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> phone = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>對於電話號碼這個變數而言，現在電話號碼裡面是空的值。</p><h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><p>對於 undefined 而言，我們則是定義了一個變數，但我們卻沒有指定它為任何一個值；</p><p>也是就是沒有對變數初始化，我們則稱為未定義。</p><p>舉個例子來說：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> phone;</span><br></pre></td></tr></table></figure><p>我們則是定義了電話號碼這個變數，但卻沒賦予任何值給這個變數。</p><h2 id="undeclared"><a href="#undeclared" class="headerlink" title="undeclared"></a>undeclared</h2><p>對於 undeclared 則是我們從未宣告過，我們未曾定義一個變數，</p><p>連變數都還沒定義，就呼叫他出來，勢必會得到 undeclared 的錯誤訊息。</p><p>舉個例子來說：</p><p>我們想印出 email 這個變數。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(email);</span><br></pre></td></tr></table></figure><p>我們會得到 <strong>Uncaught ReferenceError: email is not defined</strong></p><p>這就是告訴我們，這個變數我們不曾宣告過，不曾宣告過的變數，我們就沒辦法使用。</p><p>就好比說我還沒有小孩，親戚來時，就對我說，你的兒子呢？</p><p>不曾擁有的都東西，就沒辦法出現。</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Null">MDN - Null</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Undefined">MDN - Undefined</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var">MDN - ReferenceError - undeclared variable</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前提起過，其實對於 null 以及 undefined 是很容易搞混的，&lt;/p&gt;
&lt;p&gt;而 undefined 以及 undeclared 也常常被拿來做比較。&lt;/p&gt;
&lt;p&gt;這篇會藉由描述彼此的定義來做比較。&lt;/p&gt;
&lt;h2 id=&quot;null&quot;&gt;&lt;a href=&quot;#null&quot; class=&quot;headerlink&quot; title=&quot;null&quot;&gt;&lt;/a&gt;null&lt;/h2&gt;&lt;p&gt;對於 null 而言，當一個變數指定為 null 時，他其實不是沒有定義，&lt;/p&gt;
&lt;p&gt;純粹定義它是一個空值。就概念而言，我們可以當作是『沒有』東西。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://aranceliu.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://aranceliu.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的資料型別</title>
    <link href="https://aranceliu.github.io/2023/11/01/03-js-data-type/"/>
    <id>https://aranceliu.github.io/2023/11/01/03-js-data-type/</id>
    <published>2023-10-31T18:21:00.000Z</published>
    <updated>2023-11-18T05:29:33.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="資料型別"><a href="#資料型別" class="headerlink" title="資料型別"></a>資料型別</h1><p>大多數的程式語言都有自身的資料型別，而在 JavaScript 中又分為<strong>原生值</strong>以及<strong>物件</strong>，這兩大類。</p><h2 id="原生值"><a href="#原生值" class="headerlink" title="原生值"></a>原生值</h2><p>原生值代表著我們不能改變這個值得本身，然而除了物件外，所有的值都是原生值。</p><p>像對於定義一個變數而言，我們僅能將這個變數賦予另一個值，但卻不能把這個值給改變。</p><p>而在 JavaScript 內總共有 7 個原生值的型態：</p><span id="more"></span><h3 id="字串"><a href="#字串" class="headerlink" title="字串"></a>字串</h3><p>藉由文字資料是用來表示字串型別，上述描述的，儘管我們賦予某個變數為另一個值，</p><p>這也不代表我們將這個值改變，我們只是藉由指定讓他賦予另一個值。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Arance&quot;</span>;</span><br><span class="line">name = <span class="string">&quot;Orange&quot;</span>;</span><br></pre></td></tr></table></figure><p>賦予 name 變數的值為 Orange，但本身的『Arance』卻沒有變動。</p><p>對於字串而言，索引值起始值為 0，每一個字站一個位置，</p><p>然而肉眼看見的第一個位置（第一個元素）表示為第 0 位。</p><p>儘管我們藉由<strong>substr()</strong> 將字串取出，而使用 <strong>concat()</strong> 或 <strong>+</strong> 將字串串接起來，</p><p>本身的值也不會改變，這就是原生值的概念。</p><h3 id="數字"><a href="#數字" class="headerlink" title="數字"></a>數字</h3><p>不論是<strong>整數</strong>或是<strong>浮點數</strong>都是原生值，更準確的說 -2<sup>53</sup>-1 至 2<sup>53</sup>-1 之間的數。</p><p>然而在 JavaScript 中， <strong>+Infinity</strong> 、 <strong>-Infinity</strong> 、 <strong>NaN</strong>，這都是數字型別。</p><p>註：<strong>NaN</strong> &#x3D;&gt; Not a Number</p><h3 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h3><p>由於 2<sup>53</sup>-1 為 9007199254740991，或許會用到更大的數。</p><p>此時我們就可以藉由 BigInt，可以必免一些問題。與數字型別一樣可以使用運算子。</p><p>但不可以拿 BigInt 與數字型別的值交互使用。</p><h3 id="布林值"><a href="#布林值" class="headerlink" title="布林值"></a>布林值</h3><p>布林值只有兩個值，不是<strong>true</strong>就是<strong>false</strong>。</p><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p>undefined 的型別，本身是由於某個變數沒有宣告而使用，或是宣告了但卻沒賦予值。</p><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>null 與 undefined 很容易搞混，undefined 主要是變數還沒有定義，而 null 是賦予這個變數為 null 這一個值。</p><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>Symbol 主要會搭配物件而使用，而作為物件的 key。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">key</span>: value &#125;;</span><br></pre></td></tr></table></figure><h2 id="物件"><a href="#物件" class="headerlink" title="物件"></a>物件</h2><p>除了 7 個原生值之外，剩下存在至 JavaScript 當中都是物件。</p><p>像是 Array 以及 Function 都是物件。</p><h1 id="如何判斷變數型別？"><a href="#如何判斷變數型別？" class="headerlink" title="如何判斷變數型別？"></a>如何判斷變數型別？</h1><p>究竟要怎麼判斷一個變數的資料型別哪？</p><p>我們藉由<strong>typeof</strong>這個方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>; <span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;aaa&quot;</span>; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> &#123; <span class="attr">nn</span>: <span class="number">123</span> &#125;; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="number">123</span>; <span class="comment">// string ；因為typeof(&#x27;123&#x27;)為number，而typeof(&#x27;number&#x27;)就是String</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span>; <span class="comment">// number</span></span><br></pre></td></tr></table></figure><p>這邊特別值得一提的是，對於 typeof null 回傳值竟然是 object，</p><p>null 這個原生值型態，很多人其實認為這一點要修改，</p><p>不過目前為止 ES6 對於這仍然是沒有要更動的，</p><p>畢竟可能現在才做改變，有些人的程式碼如果有使用到的話，</p><p>就會被影響到。</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://zh.wikipedia.org/zh-tw/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B">維基百科 - 資料型態</a></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Data_structures">MDN - JavaScript 的資料型別與資料結構</a></p><p><a href="https://262.ecma-international.org/5.1/#sec-11.4.3">ECMAScript</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;資料型別&quot;&gt;&lt;a href=&quot;#資料型別&quot; class=&quot;headerlink&quot; title=&quot;資料型別&quot;&gt;&lt;/a&gt;資料型別&lt;/h1&gt;&lt;p&gt;大多數的程式語言都有自身的資料型別，而在 JavaScript 中又分為&lt;strong&gt;原生值&lt;/strong&gt;以及&lt;strong&gt;物件&lt;/strong&gt;，這兩大類。&lt;/p&gt;
&lt;h2 id=&quot;原生值&quot;&gt;&lt;a href=&quot;#原生值&quot; class=&quot;headerlink&quot; title=&quot;原生值&quot;&gt;&lt;/a&gt;原生值&lt;/h2&gt;&lt;p&gt;原生值代表著我們不能改變這個值得本身，然而除了物件外，所有的值都是原生值。&lt;/p&gt;
&lt;p&gt;像對於定義一個變數而言，我們僅能將這個變數賦予另一個值，但卻不能把這個值給改變。&lt;/p&gt;
&lt;p&gt;而在 JavaScript 內總共有 7 個原生值的型態：&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://aranceliu.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://aranceliu.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>網頁前端三元素</title>
    <link href="https://aranceliu.github.io/2023/10/29/02-front-end-three/"/>
    <id>https://aranceliu.github.io/2023/10/29/02-front-end-three/</id>
    <published>2023-10-29T14:40:00.000Z</published>
    <updated>2023-11-16T14:54:10.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="網頁"><a href="#網頁" class="headerlink" title="網頁"></a>網頁</h1><p>網頁主要是由<strong>前端</strong>以及<strong>後端</strong>，這兩個部分組織而成的。</p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前端的部分，主要是以資料輸入、採集資料；呈現介面樣式以及視覺的部分。</p><h2 id="後端"><a href="#後端" class="headerlink" title="後端"></a>後端</h2><p>後端的部分，主要是以獲取的資訊，做處理；作為後台管理系統的部分。<span id="more"></span></p><h2 id="前端三大元素"><a href="#前端三大元素" class="headerlink" title="前端三大元素"></a>前端三大元素</h2><p>然而現行的前端三大構成元素為：HTML、CSS、JavaScript。</p><ul><li>HTML：主要是網頁內容的描述語言，將它視為建立網頁的結構。</li><li>CSS：主要是網頁外觀型態的描述語言，讓它美化網頁。</li><li>JavaScript：主要用來呈現網頁動態的效果，讓用戶與網頁達到互動的效果。</li></ul><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>HTML 是 HyperText Markup Language 的縮寫，其實它並不是一個程式語言，<br>而是一個標記語言，藉由主架構之下來做的一種文件標記語言。</p><p><strong>主要的架構如下：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>CSS 是 Cascading Style Sheets 的縮寫，跟 HTML 一樣不是一個程式語言，<br>主要藉由 CSS 將 HTML 標記語言的樣式做美化。</p><p><strong>例如想要藉由 CSS 將所有段落變成紅色字：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>網頁前端所支援的 JavaScript 可以藉由這個程式語言，達到用戶與網頁做互動的功能。</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://zh.wikipedia.org/zh-tw/%E5%89%8D%E7%AB%AF%E5%92%8C%E5%90%8E%E7%AB%AF">維基百科 - 前端和後端</a></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML">MDN - HTML</a></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS">MDN - CSS</a></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript">MDN - JavaScript</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;網頁&quot;&gt;&lt;a href=&quot;#網頁&quot; class=&quot;headerlink&quot; title=&quot;網頁&quot;&gt;&lt;/a&gt;網頁&lt;/h1&gt;&lt;p&gt;網頁主要是由&lt;strong&gt;前端&lt;/strong&gt;以及&lt;strong&gt;後端&lt;/strong&gt;，這兩個部分組織而成的。&lt;/p&gt;
&lt;h2 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h2&gt;&lt;p&gt;前端的部分，主要是以資料輸入、採集資料；呈現介面樣式以及視覺的部分。&lt;/p&gt;
&lt;h2 id=&quot;後端&quot;&gt;&lt;a href=&quot;#後端&quot; class=&quot;headerlink&quot; title=&quot;後端&quot;&gt;&lt;/a&gt;後端&lt;/h2&gt;&lt;p&gt;後端的部分，主要是以獲取的資訊，做處理；作為後台管理系統的部分。</summary>
    
    
    
    <category term="JavaScript" scheme="https://aranceliu.github.io/categories/JavaScript/"/>
    
    <category term="CSS" scheme="https://aranceliu.github.io/categories/CSS/"/>
    
    <category term="HTML" scheme="https://aranceliu.github.io/categories/HTML/"/>
    
    
    <category term="JavaScript" scheme="https://aranceliu.github.io/tags/JavaScript/"/>
    
    <category term="CSS" scheme="https://aranceliu.github.io/tags/CSS/"/>
    
    <category term="HTML" scheme="https://aranceliu.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://aranceliu.github.io/2023/10/29/01-hello-world/"/>
    <id>https://aranceliu.github.io/2023/10/29/01-hello-world/</id>
    <published>2023-10-29T13:59:10.570Z</published>
    <updated>2023-11-17T13:56:40.758Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><span id="more"></span><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
